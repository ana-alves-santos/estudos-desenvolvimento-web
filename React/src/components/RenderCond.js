// const RenderCond = (props) => {  // üîπ vers√£o recebendo props

const RenderCond = ({x , y}) => { // üîπ vers√£o usando destructuring

     const x = 10; // üîπ valor fixo de x, substitui qualquer valor que venha das props

    return (
    <div>
        {/* tenta usar props.x, mas aqui n√£o funciona porque usamos destructuring */}
        {props.x > 5 && <p>X √© maior que 10</p>}

        {/* mesmo problema, props.x n√£o existe nessa vers√£o */}
        {props.x > 5 ? <p>X √© n√∫mero alto</p> : <p>X √© um n√∫mero baixo</p>}

        {/* usa o x fixo (10) que declaramos, sempre vai mostrar */}
        {x > 5 && <p>X √© maior que 10</p>}

        {/* tamb√©m usa x fixo, ent√£o sempre "n√∫mero alto" */}
        {x > 5 ? <p>X √© n√∫mero alto</p> : <p>X √© um n√∫mero baixo</p>}

        <p>O valor de y √© :10 </p>
    </div>
   );
}

export default RenderCond; 
